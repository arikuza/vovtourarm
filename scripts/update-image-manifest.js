#!/usr/bin/env node

const fs = require("fs")
const path = require("path")

const PROJECT_ROOT = path.join(__dirname, "..")
const SOURCE_IMAGES_DIR = path.join(PROJECT_ROOT, "src", "images")
const STATIC_IMAGES_DIR = path.join(PROJECT_ROOT, "static", "images")
const OUTPUT_FILE = path.join(PROJECT_ROOT, "src", "data", "image-manifest.js")

const toPublicPath = (...segments) => `/${path.posix.join(...segments)}`

const ensureDir = (dirPath) => {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true })
  }
}

const isDirectory = (dirPath) => {
  try {
    return fs.statSync(dirPath).isDirectory()
  } catch (error) {
    return false
  }
}

if (!isDirectory(SOURCE_IMAGES_DIR)) {
  console.error(`Images directory not found: ${SOURCE_IMAGES_DIR}`)
  process.exit(1)
}

const tourImages = {}
let backgrounds = []

ensureDir(STATIC_IMAGES_DIR)

const removeTargetFolder = (folderName) => {
  const targetPath = path.join(STATIC_IMAGES_DIR, folderName)
  if (fs.existsSync(targetPath)) {
    fs.rmSync(targetPath, { recursive: true, force: true })
  }
}

const copyFolder = (folderName) => {
  const sourcePath = path.join(SOURCE_IMAGES_DIR, folderName)
  const targetPath = path.join(STATIC_IMAGES_DIR, folderName)
  ensureDir(path.dirname(targetPath))
  fs.cpSync(sourcePath, targetPath, { recursive: true })
}

const imageFolders = fs.readdirSync(SOURCE_IMAGES_DIR, { withFileTypes: true })

imageFolders.forEach((entry) => {
  if (!entry.isDirectory()) return

  const folderName = entry.name
  const sourceFolderPath = path.join(SOURCE_IMAGES_DIR, folderName)

  removeTargetFolder(folderName)
  copyFolder(folderName)

  const files = fs
    .readdirSync(path.join(STATIC_IMAGES_DIR, folderName), { withFileTypes: true })
    .filter((fileEntry) => fileEntry.isFile())
    .map((fileEntry) => fileEntry.name)
    .sort((a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: "base" }))

  if (/^\d+$/.test(folderName)) {
    tourImages[folderName] = files.map((file) => toPublicPath("images", folderName, file))
  } else if (folderName === "backgrounds") {
    backgrounds = files.map((file) => toPublicPath("images", folderName, file))
  }
})

const header = [
  "// This file is auto-generated by scripts/update-image-manifest.js",
  "// Do not edit manually.",
  ""
].join("\n")

const content = `${header}export const tourImages = ${JSON.stringify(tourImages, null, 2)}\n\nexport const backgrounds = ${JSON.stringify(backgrounds, null, 2)}\n`

fs.writeFileSync(OUTPUT_FILE, content, "utf8")
console.log(`Image manifest updated at ${OUTPUT_FILE}`)
